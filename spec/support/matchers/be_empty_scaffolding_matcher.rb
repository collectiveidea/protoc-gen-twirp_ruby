# frozen_string_literal: true

# @param proto_file [String] the source proto file (with path), e.g. "example/api.proto"
# @param relative_ruby_pb_require [String] the filename of the ruby protofub to require, e.g. "api_rb"
# @param modules [Array<String>] the optional containing module(s), e.g. ["Example", "Api"]
RSpec::Matchers.define :be_empty_scaffolding do |source_proto_file, relative_ruby_pb_require, modules|
  description { "be a twirp file containing only empty scaffolding" }

  if modules.nil?
    module_declarations = ""
    module_ends = ""
    max_index_level = 0
  else
    module_declarations = modules.each_with_index.map { |mod, i| "#{"  " * i}module #{mod}" }.join("\n")
    module_ends = modules.each_with_index.map { |_, i| "#{"  " * i}end" }.reverse.join("\n")
    max_index_level = modules.size
  end

  expected = <<~EOF
    # frozen_string_literal: true

    # Generated by the protoc-gen-twirp_ruby gem v#{Twirp::ProtocPlugin::VERSION}. DO NOT EDIT!
    # source: #{source_proto_file}

    require "twirp"
    require_relative "#{relative_ruby_pb_require}"

    #{module_declarations}
    #{"  " * max_index_level}# No services found; To skip generating this file, specify `--twirp_ruby_opt=skip-empty`.
    #{module_ends}
  EOF

  failure_message do |actual|
    differ = RSpec::Support::Differ.new(color: RSpec::Matchers.configuration.color?)

    "Diff:" + differ.diff(actual, expected)
  end

  match do |actual|
    expect(expected).to eq(actual)
  end
end
